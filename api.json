{"swagger":"2.0","info":{"description":"SparkWeb REST API adds support for a whole range of modern web service connections to Openfire/XMPP","version":"0.0.1-SNAPSHOT","title":""},"basePath":"/sparkweb/api","tags":[{"name":"Authentication","description":"provides server-side authentication services"},{"name":"Chat","description":"provides chat services for the authenticated user"},{"name":"Group Chat","description":"provides groupchat services to manage contacts"},{"name":"Presence","description":"provides presence services"},{"name":"Collaboration","description":"provides meeting and other collaboration services"},{"name":"User Management","description":"provides user services for the authenticated user"},{"name":"Contact Management","description":"provides user roster services to manage contacts"},{"name":"Web Push","description":"provides server-side Web Push services"},{"name":"Bookmarks","description":"Create, update and delete Openfire bookmarks"}],"schemes":["https","http"],"paths":{"/rest/meet/{service}/{id}":{"get":{"tags":["Collaboration"],"summary":"Request meeting URL","description":"Request for online meeting URL needed to join and share with other users","operationId":"onlineMeetingRequest","produces":["application/json"],"parameters":[{"name":"service","in":"path","description":"The online meeting service required Only 'jitsi' and 'galene' are supported","required":true,"type":"string"},{"name":"id","in":"path","description":"The online meeting room, group or identity requested for","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The request was accepted","schema":{"$ref":"#/definitions/OnlineMeetingEntity"}},"400":{"description":"The meeting url request failed"}}}},"/rest/groupchat/room/{roomName}/participants":{"get":{"tags":["Group Chat"],"summary":"Get room participants","description":"Get all participants of a specific multi-user chat room","operationId":"getMUCRoomParticipants","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The chat room participants"},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}}},"/rest/groupchat/room/{roomName}/occupants":{"get":{"tags":["Group Chat"],"summary":"Get room occupants","description":"Get all occupants of a specific multi-user chat room","operationId":"getMUCRoomOccupants","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The chat room occupants","schema":{"$ref":"#/definitions/OccupantEntities"}},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}}},"/rest/pubsub/subscribe/{node}":{"post":{"tags":["Collaboration"],"summary":"Subscribe to pubsub node","description":"This endpoint is used to subscribe to a pubsub node","operationId":"subscribePubSubEvent","produces":["application/json"],"parameters":[{"name":"node","in":"path","description":"The pubsub node to be published","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The subscription was made"},"400":{"description":"The subscription fails"}}}},"/rest/user":{"get":{"tags":["User Management"],"summary":"Get authenticated user","description":"Retrieve a user that is defined in Openfire","operationId":"getUser","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The Openfire user was retrieved","schema":{"$ref":"#/definitions/UserEntity"}},"404":{"description":"No user with that username was found"}}},"put":{"tags":["User Management"],"summary":"Update authenticated user","description":"Update the authenticated user in Openfire","operationId":"updateUser","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"The definition of the authenticated user to update","required":true,"schema":{"$ref":"#/definitions/UserEntity"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The Openfire user was updated"},"404":{"description":"No user with that username was found"}}},"delete":{"tags":["User Management"],"summary":"Delete authenticated user","description":"Delete authenticated user in Openfire","operationId":"deleteUser","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The Openfire user was deleted"},"404":{"description":"No user with that username was found"}}}},"/rest/users":{"get":{"tags":["User Management"],"summary":"Get users","description":"Retrieve all users defined in Openfire (with optional filtering)","operationId":"getUsers","produces":["application/json"],"parameters":[{"name":"search","in":"query","description":"Search/Filter by username. This act like the wildcard search %String%","required":false,"type":"string"},{"name":"propertyKey","in":"query","description":"Filter by a user property name","required":false,"type":"string"},{"name":"propertyValue","in":"query","description":"Filter by user property value. Note: This can only be used in combination with a property name parameter","required":false,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"A list of Openfire users","schema":{"$ref":"#/definitions/UserEntities"}}}}},"/rest/roster/{jid}":{"put":{"tags":["Contact Management"],"summary":"Update roster entry","description":"Update a roster entry to the roster (buddies / contact list) of a particular user","operationId":"updateRosterItem","produces":["application/json"],"parameters":[{"name":"jid","in":"path","description":"The JID of the entry/contact to remove","required":true,"type":"string"},{"in":"body","name":"body","description":"The definition of the roster entry that is to be updated","required":true,"schema":{"$ref":"#/definitions/RosterItemEntity"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The entry was updated in the roster"},"400":{"description":"A roster entry cannot be updated with a 'shared group'"},"404":{"description":"No user of with this username exists"}}},"delete":{"tags":["Contact Management"],"summary":"Remove roster entry","description":"Removes one of the roster entries (contacts) of the authenticated user","operationId":"deleteRosterItem","produces":["application/json"],"parameters":[{"name":"jid","in":"path","description":"The JID of the entry/contact to remove","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Roster entry removed"},"400":{"description":"A roster entry cannot be removed from a 'shared group'"},"404":{"description":"No user of with this username exists, or its roster did not contain this entry"}}}},"/rest/groupchat/messages":{"get":{"tags":["Group Chat"],"summary":"Get groupchat messages","description":"Retrieves chat groupchat messages from Openfire messages archive","operationId":"getGroupChatConversations","produces":["application/json"],"parameters":[{"name":"keywords","in":"query","description":"Search keywords","required":false,"type":"string"},{"name":"start","in":"query","description":"The start date in MM/dd/yy format","required":false,"type":"string"},{"name":"end","in":"query","description":"The end date in MM/dd/yy format","required":false,"type":"string"},{"name":"room","in":"query","description":"The groupchat room used","required":false,"type":"string"},{"name":"service","in":"query","description":"The groupchat service name","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The messages were retrieved","schema":{"$ref":"#/definitions/Conversations"}},"400":{"description":"The messages could not be retrieved"}}}},"/rest/presence/{target}":{"get":{"tags":["Presence"],"summary":"Probe a target user presence","description":"Request the presence of an specific user","operationId":"probePresence","produces":["application/json"],"parameters":[{"name":"target","in":"path","description":"The username to be probed","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Presence of user requested","schema":{"$ref":"#/definitions/PresenceEntity"}},"400":{"description":"No xmpp connection found for authenticated user or authenticated user is not premitted to probe user presence"}}}},"/rest/user/groups":{"get":{"tags":["User Management"],"summary":"Get user's groups","description":"Retrieve names of all groups that a particular user is in","operationId":"getUserGroups","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The names of the groups that the user is in","schema":{"$ref":"#/definitions/UserGroupsEntity"}}}},"post":{"tags":["User Management"],"summary":"Add user to groups","description":"Add authenticated user to a collection of groups. When a group that is provided does not exist, it will be automatically created if possible","operationId":"addUserToGroups","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"A collection of names for groups that the user is to be added to","required":true,"schema":{"$ref":"#/definitions/UserGroupsEntity"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user was added to all groups"},"404":{"description":"One or more groups could not be found"}}},"delete":{"tags":["User Management"],"summary":"Delete user from groups","description":"Removes a user from a collection of groups.","operationId":"deleteUserFromGroups","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"A collection of names for groups that the user is to be added to","required":true,"schema":{"$ref":"#/definitions/UserGroupsEntity"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user was taken out of the group"},"404":{"description":"One or more groups could not be found"}}}},"/rest/chat/messages":{"get":{"tags":["Chat"],"summary":"Get chat messages","description":"Retrieves chat messages from Openfire messages archive","operationId":"getChatConversations","produces":["application/json"],"parameters":[{"name":"keywords","in":"query","description":"Search keywords","required":false,"type":"string"},{"name":"to","in":"query","description":"The message target","required":false,"type":"string"},{"name":"start","in":"query","description":"The start date in MM/dd/yy format","required":false,"type":"string"},{"name":"end","in":"query","description":"The end date in MM/dd/yy format","required":false,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The messages were retrieved","schema":{"$ref":"#/definitions/Conversations"}},"400":{"description":"The messages could not be retrieved"}}}},"/rest/pubsub/publish/{node}":{"post":{"tags":["Collaboration"],"summary":"Publish to pubsub node","description":"This endpoint is used to publish a JSON payload to pubsub node","operationId":"publishPubSubEvent","produces":["application/json"],"parameters":[{"name":"node","in":"path","description":"The pubsub node to be published to","required":true,"type":"string"},{"in":"body","name":"body","description":"The JSON payload to be published","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The payload was published"},"400":{"description":"The payload could not be published"}}}},"/rest/pep/nodes":{"get":{"tags":["Collaboration"],"summary":"Get user pep nodes","description":"This endpoint is used to obtain user pep nodes","operationId":"getPepNodes","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The request was accepted","schema":{"$ref":"#/definitions/NodeEntities"}},"400":{"description":"The request was rejected"}}}},"/rest/pubsub/nodes":{"get":{"tags":["Collaboration"],"summary":"Get all pubsub nodes","description":"This endpoint is used to obtain pubsub nodes","operationId":"getPubSubNodes","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The request was accepted","schema":{"$ref":"#/definitions/NodeEntities"}},"400":{"description":"The request was rejected"}}}},"/rest/pep/publish/{node}":{"post":{"tags":["Collaboration"],"summary":"Publish to pep node","description":"This endpoint is used to publish a JSON payload to personal eventing protocol (PEP) node","operationId":"publishPepEvent","produces":["application/json"],"parameters":[{"name":"node","in":"path","description":"The pep node to be published","required":true,"type":"string"},{"in":"body","name":"body","description":"The JSON payload to be published","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The payload was published"},"400":{"description":"The payload could not be published"}}}},"/rest/pubsub/create/{node}":{"post":{"tags":["Collaboration"],"summary":"Create a pubsub node","description":"This endpoint is used to create a pubsub node","operationId":"createPubSubNode","produces":["application/json"],"parameters":[{"name":"node","in":"path","description":"The pubsub node to be created","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The node was created"},"400":{"description":"The node could not be created"}}}},"/rest/groupchat/room/{roomName}":{"get":{"tags":["Group Chat"],"summary":"Get chat room","description":"Get information of a specific multi-user chat room","operationId":"getMUCRoomJSON2","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"},{"name":"expandGroups","in":"query","description":"For all groups defined in owners, admins, members and outcasts, list individual members instead of the group name","required":false,"type":"boolean","default":false}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The chat room","schema":{"$ref":"#/definitions/MUCRoomEntity"}},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}},"post":{"tags":["Group Chat"],"summary":"Post a message to a groupchat","description":"Post a message to a groupchat","operationId":"postToRoom","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room to post to","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"},{"in":"body","name":"body","description":"The text message to be posted","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The message is posted"},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}},"put":{"tags":["Group Chat"],"summary":"Join groupchat","description":"Join a groupchat by entering a MUC room","operationId":"joinRoom","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room to join","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user has joined groupchat"},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}},"delete":{"tags":["Group Chat"],"summary":"Leave groupchat","description":"Leave a groupchat by leaving a MUC room","operationId":"leaveRoom","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room to leave","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user has left groupchat"},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}}},"/rest/webauthn/register/finish/{username}":{"post":{"tags":["Authentication"],"summary":"Finish process to register a user for WebAuthn","description":"This endpoint is used to finish the webauthn registration proces","operationId":"webauthnRegisterFinish","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The credentials generated by the web client","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The authentication token","schema":{"$ref":"#/definitions/TokenEntity"}},"500":{"description":"Authentication failed"}}}},"/rest/user/groups/{groupName}":{"post":{"tags":["User Management"],"summary":"Add user to a group","description":"Add authenticated user to a collection of groups. When a group that is provided does not exist, it will be automatically created if possible","operationId":"addUserToGroup","produces":["application/json"],"parameters":[{"name":"groupName","in":"path","description":"The name of the group that the user is to be added to","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user was added to all groups"},"400":{"description":"The group could not be found"}}},"delete":{"tags":["User Management"],"summary":"Delete user from group","description":"Removes a user from a group","operationId":"deleteUserFromGroup","produces":["application/json"],"parameters":[{"name":"groupName","in":"path","description":"The name of the group that the user is to be added to","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user was taken out of the group"},"400":{"description":"The group could not be found"}}}},"/rest/webauthn/register/start/{username}":{"post":{"tags":["Authentication"],"summary":"Start process to register a user for WebAuthn","description":"This endpoint is used to start the webauthn registration proces","operationId":"webauthnRegisterStart","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The current Openfire password for the user","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"WebAuthn data to registration"},"500":{"description":"Authentication failed"}}}},"/rest/webauthn/authenticate/finish/{username}":{"post":{"tags":["Authentication"],"summary":"Finish process to authenticate a user with WebAuthn","description":"This endpoint is used to finish the webauthn authentication proces","operationId":"webauthnAuthenticateFinish","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The assertion generated by the web client","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The authentication token","schema":{"$ref":"#/definitions/TokenEntity"}},"500":{"description":"Authentication failed"}}}},"/rest/webauthn/authenticate/start/{username}":{"post":{"tags":["Authentication"],"summary":"Start process to authenticate a user with WebAuthn","description":"This endpoint is used to start the webauthn authentication proces","operationId":"webauthnAuthenticateStart","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"WebAuthn data to start authentication"},"500":{"description":"Authentication failed"}}}},"/rest/totp/authenticate/{username}/{code}":{"post":{"tags":["Authentication"],"summary":"Authenticate a user with with a TOTP code","description":"This endpoint is used to authenticate a user with a time based one-time password (TOTP) for two-factor (2FA) authentication","operationId":"authenticateTotpCode","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"name":"code","in":"path","description":"A TOTP code","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The authentication token","schema":{"$ref":"#/definitions/TokenEntity"}},"500":{"description":"Authentication failed"}}}},"/rest/webpush/action":{"post":{"tags":["Web Push"],"summary":"Send a notification action","description":"This endpoint is used to post the user action of a web push notification","operationId":"handleNotificationAction","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"A notification action","required":true,"schema":{"$ref":"#/definitions/NotificationActionEntity"}}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/webpush/subscribe/{resource}":{"put":{"tags":["Web Push"],"summary":"Store web push subscription for this user","description":"This endpoint is used to save a subscription created by a web client for this user","operationId":"postWebPushSubscription","produces":["application/json"],"parameters":[{"name":"resource","in":"path","description":"A resource name to tag the subscription","required":true,"type":"string"},{"in":"body","name":"body","description":"The subscription as created by the web client","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/webpush/vapidkey":{"get":{"tags":["Web Push"],"summary":"Get the webpush vapid key","description":"This endpoint is used to obtain the vapid key need by the client to sign web push messages","operationId":"getWebPushPublicKey","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/PublicKey"}}}}},"/rest/presence/roster":{"get":{"tags":["Presence"],"summary":"Get contacts presence","description":"Retrieve a list of all roster entries (buddies / contact list) with presence of a authenticated user","operationId":"getUserRosterWithPresence","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"All roster entries with presence","schema":{"$ref":"#/definitions/RosterEntities"}},"400":{"description":"No xmpp connection found for authenticated user"}}}},"/rest/webpush/notify/{target}":{"post":{"tags":["Web Push"],"summary":"Send a notification to all subscriptions of another user","description":"This endpoint is used to push a notification to all subscriptions of the specified user","operationId":"postWebPushNotification","produces":["application/json"],"parameters":[{"name":"target","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The notification to be pushed to the user","required":true,"schema":{"$ref":"#/definitions/NotificationEntity"}}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/bookmark/{bookmarkID}/{name}":{"post":{"tags":["Bookmarks"],"summary":"Create/Update a bookmark property","description":"This endpoint is used to create or update a bookmark property value","operationId":"updateBookmarkProperty","produces":["application/json"],"parameters":[{"name":"bookmarkID","in":"path","required":true,"type":"string"},{"name":"name","in":"path","required":true,"type":"string"},{"in":"body","name":"body","required":false,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Bookmark was updated","schema":{"$ref":"#/definitions/Bookmark"}},"400":{"description":"Bookmark could not be updated"}}},"delete":{"tags":["Bookmarks"],"summary":"Delete a bookmark property","description":"This endpoint is used to delete a bookmark property","operationId":"deleteBookmarkProperty","produces":["application/json"],"parameters":[{"name":"bookmarkID","in":"path","required":true,"type":"string"},{"name":"name","in":"path","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Bookmark was updated","schema":{"$ref":"#/definitions/Bookmark"}},"400":{"description":"Bookmark could not be updated"}}}},"/rest/bookmark/{bookmarkID}":{"get":{"tags":["Bookmarks"],"summary":"Get a specific bookmark","description":"This endpoint is used to retrieve a specific bookmark","operationId":"getBookmark","produces":["application/json"],"parameters":[{"name":"bookmarkID","in":"path","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Bookmark was retrieved","schema":{"$ref":"#/definitions/Bookmark"}},"400":{"description":"Bookmark could not be retrieved"}}},"put":{"tags":["Bookmarks"],"summary":"Update a specific bookmark","description":"This endpoint is used to update a specific bookmark","operationId":"updateBookmark","produces":["application/json"],"parameters":[{"name":"bookmarkID","in":"path","required":true,"type":"string"},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Bookmark"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Bookmark was updated","schema":{"$ref":"#/definitions/Bookmark"}},"400":{"description":"Bookmark could not be updated"}}},"delete":{"tags":["Bookmarks"],"summary":"Delete a specific bookmark","description":"This endpoint is used to delete a specific bookmark","operationId":"deleteBookmark","produces":["application/json"],"parameters":[{"name":"bookmarkID","in":"path","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/bookmarks":{"get":{"tags":["Bookmarks"],"summary":"Get all bookmark","description":"This endpoint is used to retrieve all bookmarks","operationId":"getBookmarks","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"List of bookmarks","schema":{"$ref":"#/definitions/Bookmarks"}},"400":{"description":"Bookmarks could not be retrieved"}}}},"/rest/groupchat/room/{roomName}/{invitedJid}":{"post":{"tags":["Group Chat"],"summary":"Invite another user","description":"Invite another user to a groupchat","operationId":"inviteToRoom","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"},{"name":"invitedJid","in":"path","description":"The xmpp address of the person to be invited","required":true,"type":"string"},{"in":"body","name":"body","description":"The reason for the invitation","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The invitation has been sent"},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}}},"/rest/presence":{"post":{"tags":["Presence"],"summary":"Set Presence","description":"Update the presence state of the authenticated user","operationId":"postPresence","produces":["application/json"],"parameters":[{"name":"show","in":"query","description":"The availability state of the authenticated user","required":false,"type":"string"},{"name":"status","in":"query","description":"A detailed description of the availability state","required":false,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Presence was set"},"400":{"description":"No xmpp connection found for authenticated user"}}}},"/rest/login/{username}":{"post":{"tags":["Authentication"],"summary":"Login with Username/Password","description":"This endpoint is used to login a user with a username and password","operationId":"loginUser","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The current Openfire password for the user","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The authentication token","schema":{"$ref":"#/definitions/TokenEntity"}},"500":{"description":"Authentication failed"}}}},"/rest/register/{username}":{"post":{"tags":["Authentication"],"summary":"Register a new user with username/password","description":"This endpoint is used to register a new user","operationId":"registerUser","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The password for the user","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The authentication token","schema":{"$ref":"#/definitions/TokenEntity"}},"500":{"description":"Authentication failed"}}}},"/rest/config/properties":{"get":{"tags":["User Management"],"summary":"List User Properties","description":"Endpoint to retrieve a list of all config properties for the authenticated user","operationId":"getUserConfig","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"successful operation","schema":{"type":"string"}}}},"post":{"tags":["User Management"],"summary":"Update user properties","description":"Endpoint will update user properties from an array of name/value pairs","operationId":"postUserConfig","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"A JSON array of name pairs (name/value) to set the value of a property","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/roster":{"get":{"tags":["Contact Management"],"summary":"Retrieve user roster","description":"Get a list of all roster entries (buddies / contact list) of a authenticated user","operationId":"getUserRoster","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"All roster entries","schema":{"$ref":"#/definitions/RosterEntities"}},"404":{"description":"No user with that username was found"}}},"post":{"tags":["Contact Management"],"summary":"Create roster entry","description":"Add a roster entry to the roster (buddies / contact list) of a particular user","operationId":"createRoster","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"The definition of the roster entry that is to be added","required":true,"schema":{"$ref":"#/definitions/RosterItemEntity"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The entry was added to the roster"},"400":{"description":"A roster entry cannot be added to a 'shared group' (try removing group names from the roster entry and try again)"},"404":{"description":"No user of with this username exists"},"409":{"description":"A roster entry already exists for the provided contact JID"}}}},"/rest/config/global":{"get":{"tags":["User Management"],"summary":"List global properties affecting this user","description":"Endpoint will retrieve all Openfire Global properties that are used by this authenticated user","operationId":"getGlobalConfig","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"successful operation","schema":{"type":"string"}}}}},"/rest/chat/message/{to}":{"post":{"tags":["Chat"],"summary":"Post chat message","description":"post a chat message to an xmpp address","operationId":"postMessage","produces":["application/json"],"parameters":[{"name":"to","in":"path","description":"The JID of the target xmpp address","required":true,"type":"string"},{"in":"body","name":"body","description":"The text message to be posted","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The messages was posted"},"400":{"description":"The messages could not be posted"}}}},"/rest/groupchat/rooms":{"get":{"tags":["Group Chat"],"summary":"Get chat rooms","description":"Get a list of all multi-user chat rooms of a particular chat room service","operationId":"getMUCRooms","produces":["application/json"],"parameters":[{"name":"serviceName","in":"query","description":"The name of the MUC service for which to return all chat rooms","required":false,"type":"string","default":"conference"},{"name":"type","in":"query","description":"Room type-based filter: 'all' or 'public'","required":false,"type":"string","default":"public"},{"name":"search","in":"query","description":"Search/Filter by room name.\nThis act like the wildcard search %String%","required":false,"type":"string"},{"name":"expandGroups","in":"query","description":"For all groups defined in owners, admins, members and outcasts, list individual members instead of the group name","required":false,"type":"boolean","default":false}],"security":[{"authorization":[]}],"responses":{"200":{"description":"All chat rooms","schema":{"$ref":"#/definitions/MUCRoomEntities"}},"404":{"description":"MUC service does not exist or is not accessible"}}}},"/rest/chat/chatstate/{state}/{to}":{"post":{"tags":["Chat"],"summary":"Post chat state indicator","description":"Post a chat state to an xmpp address","operationId":"postChatState","produces":["application/json"],"parameters":[{"name":"state","in":"path","description":"The chat state to be posted. It can be 'composing', 'paused', 'active', 'inactive', 'gone'","required":true,"type":"string"},{"name":"to","in":"path","description":"The JID of the target xmpp address","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The chat state was posted"},"400":{"description":"The chat state could not be posted"}}}},"/rest/groupchat/room/{roomName}/chathistory":{"get":{"tags":["Group Chat"],"summary":"Get room history","description":"Get messages that have been exchanged in a specific multi-user chat room","operationId":"getMUCRoomHistory","produces":["application/json"],"parameters":[{"name":"roomName","in":"path","description":"The name of the MUC room","required":true,"type":"string"},{"name":"serviceName","in":"query","description":"The name of the MUC service","required":false,"type":"string","default":"conference"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The chat room message history","schema":{"$ref":"#/definitions/MUCRoomMessageEntities"}},"404":{"description":"The chat room (or its service) can not be found or is not accessible"}}}},"/rest/pubsub/subscribers/{node}":{"get":{"tags":["Collaboration"],"summary":"Get all pubsub subscribers","description":"This endpoint is used to obtain pubsub subscribers for a specific node","operationId":"getPubSubscribers","produces":["application/json"],"parameters":[{"name":"node","in":"path","description":"The pubsub node of interest","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The request was accepted","schema":{"$ref":"#/definitions/UserEntities"}},"400":{"description":"The request was rejected"}}}},"/rest/upload/{fileName}/{fileSize}":{"get":{"tags":["Collaboration"],"summary":"Request file upload","description":"Request for GET and PUT URLs needed to upload and share a file with other users","operationId":"uploadRequest","produces":["application/json"],"parameters":[{"name":"fileName","in":"path","description":"The file name to be upload","required":true,"type":"string"},{"name":"fileSize","in":"path","description":"The size of the file to be uploaded","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The request was accepted"},"400":{"description":"The upload request failed"}}}},"/rest/preview/{quality}/{url}":{"get":{"tags":["Collaboration"],"summary":"Request URL preview","description":"Request for URL preview metadata","operationId":"previewLink","produces":["application/json"],"parameters":[{"name":"quality","in":"path","description":"The quality of the preview image on a scale 1-9","required":true,"type":"string"},{"name":"url","in":"path","description":"The url to be previewd","required":true,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"The metadata was obtained"},"400":{"description":"The preview request failed"}}}},"/rest/xmpp":{"post":{"tags":["Collaboration"],"summary":"Send XMPP Stanza","description":"send an XMPP stanza from aunthenticated user to server","operationId":"postXmppMessage","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"XMPP stanza to be sent to server","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"XMPP stanza was set"},"400":{"description":"No xmpp connection found for authenticated user"}}}},"/rest/bookmark":{"post":{"tags":["Bookmarks"],"summary":"Create a new bookmark","description":"This endpoint is used to create a new bookmark","operationId":"createBookmark","produces":["application/json"],"parameters":[{"in":"body","name":"body","description":"The bookmark definition","required":true,"schema":{"$ref":"#/definitions/Bookmark"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"Bookmark was created","schema":{"$ref":"#/definitions/Bookmark"}},"400":{"description":"Bookmark could not be created"}}}},"/rest/webpush/message/{target}":{"post":{"tags":["Web Push"],"summary":"Send a text message to all subscriptions of another user","description":"This endpoint is used to push a text message to all subscriptions of the specified user","operationId":"postWebPushText","produces":["application/json"],"parameters":[{"name":"target","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The text message to be pushed to the user","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"default":{"description":"successful operation"}}}},"/rest/webpush/subscribers":{"get":{"tags":["Web Push"],"summary":"Get all web push subscribers","description":"This endpoint is used to obtain all web push subscribers","operationId":"getPushSubscribers","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/UserEntities"}}}}},"/rest/../sse":{"get":{"tags":["Authentication"],"summary":"Server Sent Events (EventSource)","description":"# Server Sent Events (EventSource)\n These are the different types of events that can be sent by the server:\n\n ## chatapi.xmpp - raw xmpp messages\n The XML is encoded as a base64 string\n\n ```JSON\n {\n     \"xmpp\": \"PG1lc3NhZ2UgeG1sbnM9Imp.....mxkPC9ib2R5PjwvbWVzc2FnZT4=\"\n }\n ``` \n ## chatapi.presence - presence broadcasts\n ```JSON\n {\n \t 'type':'presence',\n \t 'to':'user@domain',\n \t 'from':'user@domain',\n \t 'status':'I am busy right now',\n \t 'show':'dnd'\n }\n ``` \n ## chatapi.chat - one to one chat messages\n\n ```JSON\n {\n \t 'type':'chat',\n \t 'body':'hello',\n \t 'to':'user@domain',\n \t 'from':'user@domain'\n }\n ``` \n ## chatapi.muc - multi-user groupchat messages\n\n ```JSON\n {\n \t 'type':'groupchat',\n \t 'to':'user@domain',\n \t 'from':'room@conference.domain',\n \t 'body':'hello'\n }\n ``` \n\n ```JSON\n {\n \t 'type':'invitationReceived',\n \t 'password':'',\n \t 'room':'room',\n \t 'inviter':'deleo',\n \t 'to':'user@domain',\n \t 'from':'user@domain',\n \t 'reason':'Please join me'\n }\n ``` \n ## chatapi.openlink - openlink callstatus messages\n\n ```JSON\n {\n \t 'type':'callstatus',\n \t 'to':'user@domain',\n \t 'from':'room@conference.domain',\n \t 'json':'openlink json payload'\n }\n ``` \n\n ## chatapi.fastpath - offer received by agent\n\n ```JSON\n {\n \t 'type':'offerReceived',\n \t 'workgroup':'string',\n \t 'from':'group@workgroup.domain',\n \t 'metadata':'string,string...',\n \t 'id':'string'\n }\n ``` \n\n ## chatapi.fastpath - offer revoked by agent\n\n ```JSON\n {\n \t 'type':'offerRevoked',\n \t 'workgroup':'string',\n \t 'from':'group@workgroup.domain',\n \t 'reason':'string',\n \t 'id':'string'\n }\n ``` \n\n ## chatapi.fastpath - groupchat messages\n\n ```JSON\n {\n \t 'type':'offer',\n \t 'to':'user@domain',\n \t 'from':'workgroup@workgroup.domain',\n \t 'mucRoom':'room@conference.domain',\n \t 'url':'https://server/ofmeet/r/room'\n }\n ``` \n\n ```JSON\n {\n \t 'type':'groupchat',\n \t 'to':'user@domain',\n \t 'from':'room@conference.domain',\n \t 'body':'hello'\n }\n ``` \n This is for documentation only. This SSE endpoint should be used in JavaScript as follows :\n\n ```js \n const source = new EventSource('./sse?token=' + token);\n\n source.onerror = async event => { \n\n\t };\n\n source.addEventListener('chatapi.chat', async event => {\n\n });\t\n ``` \n                       ","operationId":"sseListener","produces":["application/json"],"parameters":[{"name":"token","in":"query","description":"JWT Token issued by WebAuthn","required":false,"type":"string"}],"security":[{"authorization":[]}],"responses":{"200":{"description":"SSE connected"},"500":{"description":"SSE failed to connect"}}}},"/rest/logout":{"post":{"tags":["Authentication"],"summary":"Logout user","description":"This end point is used to logout the authenticated user","operationId":"logoutUser","produces":["application/json"],"parameters":[],"security":[{"authorization":[]}],"responses":{"200":{"description":"The user was logged out"},"400":{"description":"The user not be logged out"}}}},"/rest/totp/register/{username}":{"post":{"tags":["Authentication"],"summary":"Create a TOTP registration QR code","description":"This endpoint is used to obtain a QR code for time based one-time password (TOTP) two-factor (2FA) authentication","operationId":"getTotpQrCode","produces":["application/json"],"parameters":[{"name":"username","in":"path","description":"A valid Openfire username","required":true,"type":"string"},{"in":"body","name":"body","description":"The current Openfire password for the user","required":true,"schema":{"type":"string"}}],"security":[{"authorization":[]}],"responses":{"200":{"description":"QR Code for TOTP registration","schema":{"$ref":"#/definitions/TOTPEntity"}},"500":{"description":"Request failed"}}}}},"securityDefinitions":{"authorization":{"description":"","type":"apiKey","name":"authorization","in":"header"}},"definitions":{"OnlineMeetingEntity":{"type":"object","properties":{"url":{"type":"string"}},"xml":{"name":"online-meeting"}},"ParticipantEntities":{"type":"object","properties":{"participants":{"type":"array","xml":{"name":"participant"},"items":{"xml":{"name":"participant"},"$ref":"#/definitions/ParticipantEntity"}}},"xml":{"name":"participants"}},"ParticipantEntity":{"type":"object","properties":{"jid":{"type":"string"},"role":{"type":"string"},"affiliation":{"type":"string"}},"xml":{"name":"participant"}},"OccupantEntities":{"type":"object","properties":{"occupants":{"type":"array","xml":{"name":"occupant"},"items":{"xml":{"name":"occupant"},"$ref":"#/definitions/OccupantEntity"}}},"xml":{"name":"occupants"}},"OccupantEntity":{"type":"object","properties":{"jid":{"type":"string"},"userAddress":{"type":"string"},"role":{"type":"string"},"affiliation":{"type":"string"}},"xml":{"name":"occupant"}},"UserEntity":{"type":"object","properties":{"username":{"type":"string"},"vcard":{"type":"string"},"name":{"type":"string"},"email":{"type":"string"},"password":{"type":"string"},"properties":{"type":"array","xml":{"wrapped":true},"items":{"xml":{"name":"property"},"$ref":"#/definitions/UserProperty"}}},"xml":{"name":"user"}},"UserProperty":{"type":"object","properties":{"key":{"type":"string","xml":{"attribute":true}},"value":{"type":"string","xml":{"attribute":true}}}},"UserEntities":{"type":"object","properties":{"users":{"type":"array","xml":{"name":"user"},"items":{"xml":{"name":"user"},"$ref":"#/definitions/UserEntity"}}},"xml":{"name":"users"}},"ArchivedMessage":{"type":"object","properties":{"conversationID":{"type":"integer","format":"int64"},"fromJID":{"$ref":"#/definitions/JID"},"toJID":{"$ref":"#/definitions/JID"},"sentDate":{"type":"string","format":"date-time"},"body":{"type":"string"},"stanza":{"type":"string"},"roomEvent":{"type":"boolean"},"from":{"type":"string"},"to":{"type":"string"}},"xml":{"name":"message"}},"Conversation":{"type":"object","properties":{"conversationID":{"type":"integer","format":"int64"},"participants":{"type":"array","items":{"$ref":"#/definitions/JID"}},"external":{"type":"boolean"},"startDate":{"type":"string","format":"date-time"},"lastActivity":{"type":"string","format":"date-time"},"messageCount":{"type":"integer","format":"int32"},"room":{"$ref":"#/definitions/JID"},"participantList":{"type":"array","items":{"type":"string"}},"messages":{"type":"array","xml":{"wrapped":true},"items":{"xml":{"name":"message"},"$ref":"#/definitions/ArchivedMessage"}},"chatRoom":{"type":"string"},"conversationParticipants":{"type":"array","items":{"type":"string"}}},"xml":{"name":"conversation"}},"Conversations":{"type":"object","properties":{"conversations":{"type":"array","xml":{"name":"conversation"},"items":{"xml":{"name":"conversation"},"$ref":"#/definitions/Conversation"}}},"xml":{"name":"conversations"}},"JID":{"type":"object","properties":{"node":{"type":"string"},"domain":{"type":"string"},"resource":{"type":"string"}}},"RosterItemEntity":{"type":"object","properties":{"jid":{"type":"string"},"nickname":{"type":"string"},"subscriptionType":{"type":"integer","format":"int32"},"show":{"type":"string"},"status":{"type":"string"},"groups":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"group"}}}},"xml":{"name":"rosterItem"}},"PresenceEntity":{"type":"object","properties":{"username":{"type":"string"},"show":{"type":"string"},"status":{"type":"string"}},"xml":{"name":"presence"}},"UserGroupsEntity":{"type":"object","properties":{"groupnames":{"type":"array","xml":{"name":"groupname"},"items":{"type":"string","xml":{"name":"groupname"}}}},"xml":{"name":"groups"}},"NodeEntities":{"type":"object","properties":{"nodes":{"type":"array","xml":{"name":"node"},"items":{"xml":{"name":"node"},"$ref":"#/definitions/NodeEntity"}}},"xml":{"name":"nodes"}},"NodeEntity":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"},"owners":{"type":"array","items":{"type":"string"}}},"xml":{"name":"node"}},"TokenEntity":{"type":"object","properties":{"token":{"type":"string"}},"xml":{"name":"token"}},"NotificationActionEntity":{"type":"object","properties":{"action":{"type":"string"},"data":{"type":"string"},"value":{"type":"string"},"icon":{"type":"string"},"type":{"type":"string"},"placeholder":{"type":"string"},"title":{"type":"string"}},"xml":{"name":"action"}},"PublicKey":{"type":"object","properties":{"publicKey":{"type":"string"}},"xml":{"name":"vapid"}},"RosterEntities":{"type":"object","properties":{"roster":{"type":"array","xml":{"name":"rosterItem"},"items":{"xml":{"name":"rosterItem"},"$ref":"#/definitions/RosterItemEntity"}}},"xml":{"name":"roster"}},"NotificationEntity":{"type":"object","properties":{"subject":{"type":"string"},"token":{"type":"string"},"body":{"type":"string"},"icon":{"type":"string"},"requireInteraction":{"type":"boolean"},"persistent":{"type":"boolean"},"sticky":{"type":"boolean"},"data":{"type":"string"},"actions":{"type":"array","items":{"$ref":"#/definitions/NotificationActionEntity"}}},"xml":{"name":"notification"}},"Bookmark":{"type":"object","properties":{"bookmarkID":{"type":"integer","format":"int64"},"type":{"type":"string","enum":["url","group_chat"]},"name":{"type":"string"},"value":{"type":"string"},"users":{"type":"array","items":{"type":"string"}},"groups":{"type":"array","items":{"type":"string"}},"properties":{"type":"array","xml":{"wrapped":true},"items":{"xml":{"name":"property"},"$ref":"#/definitions/UserProperty"}},"propertyNames":{"$ref":"#/definitions/IteratorString"},"globalBookmark":{"type":"boolean"}},"xml":{"name":"bookmark"}},"Iterator":{"type":"object"},"IteratorString":{"type":"object"},"Bookmarks":{"type":"object","properties":{"bookmarks":{"type":"array","xml":{"name":"bookmark"},"items":{"xml":{"name":"bookmark"},"$ref":"#/definitions/Bookmark"}}},"xml":{"name":"bookmarks"}},"MUCRoomEntities":{"type":"object","properties":{"chatRooms":{"type":"array","xml":{"name":"chatRoom"},"items":{"xml":{"name":"chatRoom"},"$ref":"#/definitions/MUCRoomEntity"}}},"xml":{"name":"chatRooms"}},"MUCRoomEntity":{"type":"object","properties":{"roomName":{"type":"string"},"description":{"type":"string"},"password":{"type":"string"},"subject":{"type":"string"},"naturalName":{"type":"string"},"maxUsers":{"type":"integer","format":"int32"},"creationDate":{"type":"string","format":"date-time"},"modificationDate":{"type":"string","format":"date-time"},"persistent":{"type":"boolean"},"publicRoom":{"type":"boolean"},"registrationEnabled":{"type":"boolean"},"canAnyoneDiscoverJID":{"type":"boolean"},"canOccupantsChangeSubject":{"type":"boolean"},"canOccupantsInvite":{"type":"boolean"},"canChangeNickname":{"type":"boolean"},"logEnabled":{"type":"boolean"},"loginRestrictedToNickname":{"type":"boolean"},"membersOnly":{"type":"boolean"},"moderated":{"type":"boolean"},"allowPM":{"type":"string"},"broadcastPresenceRoles":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"broadcastPresenceRole"}}},"owners":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"owner"}}},"ownerGroups":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"ownerGroup"}}},"admins":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"admin"}}},"adminGroups":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"adminGroup"}}},"members":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"member"}}},"memberGroups":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"memberGroup"}}},"outcasts":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"outcast"}}},"outcastGroups":{"type":"array","xml":{"wrapped":true},"items":{"type":"string","xml":{"name":"outcastGroup"}}}},"xml":{"name":"chatRoom"}},"MUCRoomMessageEntities":{"type":"object","properties":{"messages":{"type":"array","xml":{"name":"message"},"items":{"xml":{"name":"message"},"$ref":"#/definitions/MUCRoomMessageEntity"}}},"xml":{"name":"messages"}},"MUCRoomMessageEntity":{"type":"object","properties":{"to":{"type":"string"},"from":{"type":"string"},"type":{"type":"string"},"body":{"type":"string"},"delayStamp":{"type":"string","xml":{"name":"delay_stamp"}},"delayFrom":{"type":"string","xml":{"name":"delay_from"}}},"xml":{"name":"message"}},"TOTPEntity":{"type":"object","properties":{"url":{"type":"string"}},"xml":{"name":"totp"}}}}